#!/bin/bash
# $0 - Manages zram as swap.
# 
# Usage
#   $0 action

## Stuff that might be good to abstract out for a user to configure.
percentageOfRamToUse="80"
device="zram0"
fullDevice="/dev/$device"
temporaryState="/var/lock/auto-zram"

function findDeviceConfig
{
  for possibleConfig in "/sys/deviceConfigs/virtual/block/$device" "/sys/devices/virtual/block/$device"
  do
    if [ -e "$possibleConfig" ]; then
      echo "$possibleConfig"
    fi
  done
}

function moduleIsLoaded
{
  if lsmod | grep -q zram; then
    return 0
  else
    return 1
  fi
}

function loadModule
{
  if ! moduleIsLoaded; then
    echo "zram module isn't loaded. Loading it."
    modprobe zram
  fi
}

function figureOutStuff
{
  totalMemory="$(free -m | grep Mem: | awk '{print $2}')"
  let maxPhysicalUsage=$totalMemory*$percentageOfRamToUse/100
  let virtualSize=$maxPhysicalUsage*2
  let uncompressedMemory=$totalMemory-$maxPhysicalUsage
  let totalPossible=$uncompressedMemory+$virtualSize

  coresAvailable="$(lscpu | grep '^Core(s) per socket:' | awk '{print $4}')"
  let coresToUse=$coresAvailable-1
}

function getMount
{
  lsblk | head -n 1
  lsblk | grep zram
}

function getSwapState
{
  free -m | head -n 1
  free -m | grep ^Swap:
}

function indent
{
  withThis="$1"
  
  sed "s/^/$withThis/g"
}

function isInUse
{
  if swapon --show | grep -q "^$fullDevice"; then
    return 0
  else
    return 1
  fi
}

function status
{
  if moduleIsLoaded; then
    moduleState="loaded"
  else
    moduleState="not loaded"
  fi
  
  if isInUse; then
    mountState="mounted"
  else
    mountState="not mounted"
  fi
  
  echo "State
  module              $moduleState
  device              $mountState

Mount"
  
  getMount | indent "  "
  
  echo "
Swap"
  
  getSwapState | indent "  "

  echo
  echo "Config
  % of memory to use  $percentageOfRamToUse
  device              $device
  device config       $deviceConfig

Memory (MB)
  total               $totalMemory
  maxPhysicalUsage    $maxPhysicalUsage
  virtualSize         $virtualSize
  uncompressed        $uncompressedMemory
  ---
  totalPossible       $totalPossible

CPU
  coresAvailable      $coresAvailable
  coresToUse          $coresToUse"
}

function applyIt
{
  swapoff -a

  echo "$coresToUse" > "$deviceConfig/max_comp_streams"
  echo "lz4" > "$deviceConfig/comp_algorithm"
  echo "${maxPhysicalUsage}M" > "$deviceConfig/mem_limit"
  echo "${virtualSize}M" > "$deviceConfig/disksize"

  mkswap /dev/zram0
  swapon -p 0 /dev/zram0
  sysctl vm.swappiness=70
}

function unloadIt
{
  swapoff -a
  modprobe -r zram
  swapon -a
}

function requireRoot
{
  if [ "$(id -u)" != '0' ]; then
    echo "You need to be root to perform this action." >&2
    exit 1
  fi
}

case $1 in
  "start") # Configure zram as swap.
    requireRoot
    if ! isInUse; then
      loadModule
      deviceConfig="$(findDeviceConfig | head -n1)"
      figureOutStuff
      applyIt
    else
      echo "ZRAM already mounted using $device." >&2
    fi
    status
  ;;
  "stop") # Unload zram from being used as swap.
    requireRoot
    if isInUse; then
      unloadIt
      figureOutStuff
    else
      echo "ZRAM not mounted using $device." >&2
    fi
    status
  ;;
  "status") # Show the current state.
    figureOutStuff
    deviceConfig="$(findDeviceConfig | head -n1)"
    status
  ;;
  *)
    command="$(basename $0)"
    grep "^# " $0 | sed "s#\\\$0#$command#g" | cut -b3-
    echo -e "\nWhere action is one of"
    grep '") [#] ' $0 | sed 's/"//g; s/) # /\t/g' | column -t -s"$(echo -e "\\t")"
  ;;
esac
