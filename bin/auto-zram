#!/bin/bash
# $0 - Manages zram as swap.
# 
# Usage
#   $0 action

configFile="/etc/auto-zram.sh"
percentUpperWarnLevel=95
percentLowerWarnLevel=1

## Set some sensible defaults.
percentageOfRamToUse="80"
device="zram0"
fullDevice="/dev/$device"
coresToKeepFree=1

## Load the config if it's available.
loadedConfigFile='false'
if [ -e "$configFile" ]; then
  # shellcheck source=../config/auto-zram.sh
  . "$configFile"
  loadedConfigFile='true'
fi

function findDeviceConfig
{
  for possibleConfig in "/sys/deviceConfigs/virtual/block/$device" "/sys/devices/virtual/block/$device"
  do
    if [ -e "$possibleConfig" ]; then
      echo "$possibleConfig"
    fi
  done
}

function moduleIsLoaded
{
  if lsmod | grep -q zram; then
    return 0
  else
    return 1
  fi
}

function loadModule
{
  if ! moduleIsLoaded; then
    echo "zram module isn't loaded. Loading it."
    modprobe zram
  fi
}

function figureOutStuff
{
  totalMemory="$(free -m | grep Mem: | awk '{print $2}')"
  maxPhysicalUsage=$((totalMemory*percentageOfRamToUse/100))
  virtualSize=$((maxPhysicalUsage*2))
  uncompressedMemory=$((totalMemory-maxPhysicalUsage))
  totalPossible=$((uncompressedMemory+virtualSize))

  coresAvailable="$(lscpu | grep '^Core(s) per socket:' | awk '{print $4}')"
  coresToUse=$((coresAvailable-coresToKeepFree))

  if [ "$coresToUse" -lt 1 ]; then
    echo "WARNING: $coresToUse coresToUse is too small. Overriding to 1. coresToUse is derived by taking coresAvailable($coresAvailable) and subtracting $coresToKeepFree($coresToKeepFree)." >&2
    coresToUse=1;
  fi

  if [ "$coresToUse" -gt "$coresAvailable" ]; then
    echo "WARNING: $coresToUse coresToUse is too high. Overriding to coresAvailable ($coresAvailable). coresToUse is derived by taking coresAvailable($coresAvailable) and subtracting $coresToKeepFree($coresToKeepFree)." >&2
    coresToUse=1;
  fi

  if [ "$percentageOfRamToUse" -gt "$percentUpperWarnLevel" ]; then
    echo "WARNING: This warning for percentageOfRamToUse is configured to go off above $percentUpperWarnLevel. You can ignore this warning and it will almost certainly work for a little while. But please take a moment to make sure it is actually what you want to do. It's highly likely that this will be unstable or at the minimum perform poorly." >&2
  fi

  if [ "$percentageOfRamToUse" -lt "$percentLowerWarnLevel" ]; then
    echo "WARNING: This warning for percentageOfRamToUse is configured to go off below $percentLowerWarnLevel. It's unlikely that this is what you want to do, and I have not tested this configuration. Please run \`auto-zram status\` to see if the numbers are what you expect. In particular, check \"uncompressed\" which is how much RAM will be free when swap has reached it's full footprint." >&2
  fi
}

function getMount
{
  lsblk | head -n 1
  lsblk | grep zram
}

function getSwapState
{
  free -m | head -n 1
  free -m | grep ^Swap:
}

function indent
{
  withThis="$1"
  
  sed "s/^/$withThis/g"
}

function isInUse
{
  if swapon --show | grep -q "^$fullDevice"; then
    return 0
  else
    return 1
  fi
}

function status
{
  if moduleIsLoaded; then
    moduleState="loaded"
  else
    moduleState="not loaded"
  fi
  
  if isInUse; then
    mountState="mounted"
  else
    mountState="not mounted"
  fi
  
echo "Config
  % of memory to use    $percentageOfRamToUse
  device                $device
  deviceConfig          $deviceConfig
  usedConfigFile        $loadedConfigFile
  config file           $configFile
Derived config/knowledge
  Memory (MB)
    total               $totalMemory
    maxPhysicalUsage    $maxPhysicalUsage
    virtualSize         $virtualSize
    uncompressed        $uncompressedMemory
    ---
    totalPossible       $totalPossible

  CPU
    coresAvailable      $coresAvailable
    coresToKeepFree     $coresToKeepFree
    coresToUse          $coresToUse

State
  General
    module              $moduleState
    device              $mountState

  Mount"
    
    getMount | indent "    "
    
    echo "
  Swap"
    
    getSwapState | indent "    "

  echo
}

function applyIt
{
  swapoff -a

  echo "$coresToUse" > "$deviceConfig/max_comp_streams"
  echo "lz4" > "$deviceConfig/comp_algorithm"
  echo "${maxPhysicalUsage}M" > "$deviceConfig/mem_limit"
  echo "${virtualSize}M" > "$deviceConfig/disksize"

  mkswap /dev/zram0
  swapon -p 0 /dev/zram0
  sysctl vm.swappiness=70
}

function unloadIt
{
  swapoff -a
  modprobe -r zram
  swapon -a
}

function requireRoot
{
  if [ "$(id -u)" != '0' ]; then
    echo "You need to be root to perform this action." >&2
    exit 1
  fi
}

case $1 in
  "start") # Configure zram as swap.
    requireRoot
    if ! isInUse; then
      loadModule
      deviceConfig="$(findDeviceConfig | head -n1)"
      figureOutStuff
      applyIt
    else
      echo "ZRAM already mounted using $device." >&2
    fi
    status
  ;;
  "stop") # Unload zram from being used as swap.
    requireRoot
    if isInUse; then
      unloadIt
      figureOutStuff
    else
      echo "ZRAM not mounted using $device." >&2
    fi
    status
  ;;
  "status") # Show the current state.
    figureOutStuff
    deviceConfig="$(findDeviceConfig | head -n1)"
    status
  ;;
  "prototype") # Show what would be the current state with a different percentage as percentageOfRamToUse. Eg $0 prototype 50 . You can apply this in /etc/auto-zram.sh .
    percentageOfRamToUse="$2"
    figureOutStuff
    deviceConfig="$(findDeviceConfig | head -n1)"
    status
  ;;
  *)
    command="$(basename "$0")"
    grep "^# " "$0" | sed "s#\\\$0#$command#g" | cut -b3-
    echo -e "\nWhere action is one of"
    # shellcheck disable=SC2016
    grep '") [#] ' "$0" | sed 's/"//g; s/) # /\t/g;s/$0/'"$command"'/g' | column -t -s"$(echo -e "\\t")"
  ;;
esac
